package health

import (
	"context"
	"errors"
	"io"
	"testing"
	"time"

	"github.com/Financial-Times/draft-content-suggestions/config"
	logger "github.com/Financial-Times/go-logger/v2"

	logrus "github.com/sirupsen/logrus"
	logTest "github.com/sirupsen/logrus/hooks/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestHealthService_HealthSuccess(t *testing.T) {
	log := logger.NewUPPLogger("Test", "INFO")
	hook := logTest.NewLocal(log.Logger)
	umbrellaAPI := new(UmbrellaAPI)
	contentAPI := new(ContentAPI)

	umbrellaAPI.On("IsGTG", context.Background()).Return("good to go here!", nil)
	umbrellaAPI.On("Endpoint").Return("test")
	contentAPI.On("IsGTG", context.Background()).Return("good to go here!", nil)
	contentAPI.On("Endpoint").Return("test")

	healthService, err := NewService("", "", "", contentAPI, umbrellaAPI, &config.Config{}, []ExternalService{}, log)
	if err != nil {
		t.Fatal(err)
	}
	gtg := healthService.GTG()

	assert.True(t, gtg.GoodToGo)
	assert.Empty(t, hook.Entries)
}

func TestHealthService_HealthPartialFailure(t *testing.T) {
	log := logger.NewUPPLogger("Test", "INFO")
	hook := logTest.NewLocal(log.Logger)
	umbrellaAPI := new(UmbrellaAPI)
	contentAPI := new(ContentAPI)

	umbrellaAPI.On("IsGTG", context.Background()).Return("", errors.New("dying of boredom"))
	umbrellaAPI.On("Endpoint").Return("test")
	contentAPI.On("IsGTG", context.Background()).Return("good to go here!", nil)
	contentAPI.On("Endpoint").Return("test")

	healthService, err := NewService("", "", "", contentAPI, umbrellaAPI, &config.Config{}, []ExternalService{}, log)
	if err != nil {
		t.Fatal(err)
	}
	gtg := healthService.GTG()

	assert.False(t, gtg.GoodToGo)
	if assert.Len(t, hook.AllEntries(), 1) {
		assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)
	}
}

func TestHealthService_HealthFullFailure(t *testing.T) {
	log := logger.NewUPPLogger("Test", "INFO")
	hook := logTest.NewLocal(log.Logger)
	umbrellaAPI := new(UmbrellaAPI)
	contentAPI := new(ContentAPI)

	umbrellaAPI.On("IsGTG", context.Background()).Return("", errors.New("dying of boredom"))
	umbrellaAPI.On("Endpoint").Return("test")
	contentAPI.On("IsGTG", context.Background()).Return("", errors.New("dying of boredom"))
	contentAPI.On("Endpoint").Return("test")

	healthService, err := NewService("", "", "", contentAPI, umbrellaAPI, &config.Config{}, []ExternalService{}, log)
	if err != nil {
		t.Fatal(err)
	}
	gtg := healthService.GTG()

	assert.False(t, gtg.GoodToGo)

	// Without a sleep the hook randomly returns 1 or 2 log entries causing the test to fail
	time.Sleep(10 * time.Millisecond)
	if assert.Len(t, hook.AllEntries(), 2) {
		assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)
	}
}

// Mocks

// UmbrellaAPI is an autogenerated mock type for the UmbrellaAPI type
type UmbrellaAPI struct {
	mock.Mock
}

// Endpoint provides a mock function with given fields:
func (_m *UmbrellaAPI) Endpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FetchSuggestions provides a mock function with given fields: ctx, content
func (_m *UmbrellaAPI) FetchSuggestions(ctx context.Context, content []byte) ([]byte, error) {
	ret := _m.Called(ctx, content)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsGTG provides a mock function with given fields: ctx
func (_m *UmbrellaAPI) IsGTG(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValid provides a mock function with given fields:
func (_m *UmbrellaAPI) IsValid() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentAPI is an autogenerated mock type for the ContentAPI type
type ContentAPI struct {
	mock.Mock
}

// Endpoint provides a mock function with given fields:
func (_m *ContentAPI) Endpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FetchDraftContent provides a mock function with given fields: ctx, uuid
func (_m *ContentAPI) FetchDraftContent(ctx context.Context, uuid string) ([]byte, error) {
	ret := _m.Called(ctx, uuid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchDraftContent provides a mock function with given fields: ctx, uuid
func (_m *ContentAPI) FetchValidatedContent(ctx context.Context, body io.Reader, contentUUID string, contentType string, log *logger.UPPLogger) ([]byte, error) {
	ret := _m.Called(ctx, contentUUID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, contentUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, contentUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsGTG provides a mock function with given fields: ctx
func (_m *ContentAPI) IsGTG(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValid provides a mock function with given fields:
func (_m *ContentAPI) IsValid() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
